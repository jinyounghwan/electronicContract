<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.samsung.framework.mapper.account.AccountMapper">
    <sql id="search">
        <if test="(startDt != null and startDt != '') and (endDt != null and endDt != '')">
            <if test="searchDateType == 'ALL'">
                AND U.CREATED_AT BETWEEN DATE(#{startDt}) AND DATE_ADD(DATE(#{endDt}), INTERVAL 1 DAY)
                AND U.UPDATED_AT BETWEEN DATE(#{startDt}) AND DATE_ADD(DATE(#{endDt}), INTERVAL 1 DAY)
            </if>
            <if test="searchDateType == 'CREATED_AT'">
                AND U.CREATED_AT BETWEEN DATE(#{startDt}) AND DATE_ADD(DATE(#{endDt}), INTERVAL 1 DAY)
            </if>
            <if test="searchDateType == 'UPDATED_AT'">
                AND U.UPDATED_AT BETWEEN DATE(#{startDt}) AND DATE_ADD(DATE(#{endDt}), INTERVAL 1 DAY)
            </if>
        </if>
        <choose>
            <when test="searchKeyword != null and searchKeyword != ''">
                <choose>
                    <when test="searchKeywordType == 'NAME'">
                        AND LOWER(NAME) LIKE LOWER(CONCAT('%', #{searchKeyword}, '%'))
                    </when>
                    <when test="searchKeywordType == 'EMPLOYEE_ID' or searchKeywordType =='ADMIN_ID'">
                        AND LOWER(EMP_NO) LIKE LOWER(CONCAT('%', #{searchKeyword}, '%'))
                    </when>
                    <when test="searchKeywordType == 'EMAIL'">
                        AND LOWER(EMAIL) LIKE LOWER(CONCAT('%', #{searchKeyword}, '%'))
                    </when>
                    <when test="searchKeywordType == 'ALL'">
                        AND
                            (
                                    LOWER(NAME) LIKE LOWER(CONCAT('%', #{searchKeyword} , '%'))
                                OR  LOWER(EMAIL) LIKE LOWER(CONCAT('%', #{searchKeyword}, '%'))
                                OR LOWER(EMP_NO) LIKE LOWER(CONCAT('%', #{searchKeyword}, '%'))
                            )
                    </when>
                </choose>
            </when>
            <otherwise>
                AND
                    (
                            LOWER(NAME) LIKE LOWER(CONCAT('%', #{searchKeyword} , '%'))
                        OR  LOWER(EMAIL) LIKE LOWER(CONCAT('%', #{searchKeyword}, '%'))
                        OR LOWER(EMP_NO) LIKE LOWER(CONCAT('%', #{searchKeyword}, '%'))
                    )
            </otherwise>
        </choose>
    </sql>

    <select id="existsByEmpNo" resultType="boolean">
        SELECT IF(COUNT(1) = 1, true, false)
        FROM USERS
        WHERE EMP_NO = #{empNo}
    </select>

    <select id="findAllTotalCount">
        SELECT COUNT(1)
        FROM USERS U
        WHERE
            USE_YN = 'Y'
        <if test="accountType != null and accountType != '' ">
            AND ACCOUNT_TYPE = #{accountType}
        </if>
        <include refid="search"/>
    </select>

    <select id = "getAccountList" resultType="AccountVO">
        WITH LAST_LOG AS (
            SELECT CREATED_BY AS CREATED_BY, MAX(CREATED_AT) AS LAST_LOGIN,
            CREATED_AT AS CREATED_AT, LOG_TYPE AS LOG_TYPE
            FROM PROCESS_LOG
            WHERE LOG_TYPE='LOGIN'
            GROUP BY CREATED_BY
            ORDER BY CREATED_AT DESC
        ),PASSWORD_LOG AS (
            SELECT CREATED_BY AS CREATED_BY, MAX(CREATED_AT) AS PASSWORD_AT,
            CREATED_AT AS CREATED_AT
            FROM PROCESS_LOG
            WHERE LOG_TYPE='PASSWORD_CHANGE'
            GROUP BY CREATED_BY
            ORDER BY CREATED_AT DESC
        )
        SELECT  DISTINCT  U.EMP_NO AS EMP_NO , U.CREATED_AT AS CREATED_AT
                , U.UPDATED_AT AS UPDATED_AT, LL.LAST_LOGIN AS LAST_LOGIN
                , U.NAME AS NAME, U.EMAIL AS EMAIL
                , PWD.PASSWORD_AT AS PASSWORD_AT
        FROM USERS U
            LEFT JOIN LAST_LOG LL ON U.EMP_NO = LL.CREATED_BY
            LEFT JOIN PASSWORD_LOG PWD ON U.EMP_NO = PWD.CREATED_BY
        WHERE
            ACCOUNT_TYPE = #{accountType}
        <include refid="search"/>
        ORDER BY CREATED_AT DESC
        LIMIT #{paging.displayRow} OFFSET #{paging.offset}
    </select>


    <select id="memberListCount">
        SELECT COUNT(1) FROM USERS
    </select>

    <select id="memberListSearchCount">
        SELECT COUNT(1) FROM USERS
        <where></where>
        ORDER BY EMP_NO DESC
    </select>

    <select id="getMemberList" resultType="AccountVO">
        SELECT EMP_NO, DEPT_CODE, ADMIN_ID, USER_PW, NAME, POSITION, EMAIL, PHONE FROM USERS ORDER BY EMP_NO DESC
    </select>

    <select id="findMemberById" resultType="AccountVO">
        SELECT EMP_NO, DEPT_CODE, USER_ID, USER_PW, NAME, POSITION, EMAIL, PHONE FROM USERS WHERE USER_ID = #{id}
    </select>

    <select id="getAccountDetail">
        WITH LAST_LOG AS (
            SELECT CREATED_BY AS CREATED_BY, MAX(CREATED_AT) AS LAST_LOGIN,
                   CREATED_AT AS CREATED_AT, LOG_TYPE AS LOG_TYPE
            FROM PROCESS_LOG
            WHERE LOG_TYPE='LOGIN'
            GROUP BY CREATED_BY
            ORDER BY CREATED_AT DESC
        ),PASSWORD_LOG AS (
            SELECT CREATED_BY AS CREATED_BY, MAX(CREATED_AT) AS PASSWORD_AT,
                   CREATED_AT AS CREATED_AT
            FROM PROCESS_LOG
            WHERE LOG_TYPE='PASSWORD_CHANGE'
            GROUP BY CREATED_BY
            ORDER BY CREATED_AT DESC
        )
        SELECT  DISTINCT  U.EMP_NO AS EMP_NO , U.CREATED_AT AS CREATED_AT
                , U.UPDATED_AT AS UPDATED_AT, LL.LAST_LOGIN AS LAST_LOGIN
                , U.NAME AS NAME, U.EMAIL AS EMAIL
                , PWD.PASSWORD_AT AS PASSWORD_AT
        FROM USERS U
                 LEFT JOIN LAST_LOG LL ON U.EMP_NO = LL.CREATED_BY
                 LEFT JOIN PASSWORD_LOG PWD ON U.EMP_NO = PWD.CREATED_BY
        WHERE
            U.EMP_NO = #{userId} AND U.ACCOUNT_TYPE = #{accountType}
    </select>


    <!--#################### DEJAY_COMMON ####################-->
    <select id="findMemberByUserName" resultType="AccountVO">
        SELECT U.EMP_NO, U.DEPT_CODE, U.USER_ID, U.USER_PW, U.NAME, U.POSITION, U.EMAIL
        FROM USERS U
        WHERE NAME = #{name}
    </select>

    <!-- 최근 로그인 이력 저장을 위한 정보 조회 -->
    <select id="getLoginInfo" resultType="AccountVO">
        SELECT U.EMP_NO, U.DEPT_CODE
             ,U.USER_PW, U.NAME
             , U.EMAIL, U.ACCOUNT_TYPE
             , U.PHONE, U.POSITION
        FROM USERS U
        WHERE U.EMP_NO = #{userId}
            AND U.USE_YN = 'Y'
    </select>

    <!-- 인증키 조회를 위한 정보 조회 -->
    <select id="getAuthInfo" resultType="AccountVO">
        SELECT U.EMP_NO,
        U.authority
        FROM USERS U
            WHERE U.EMP_NO = #{userId}
                AND U.USE_YN = 'Y'
    </select>

    <insert id="insertMember" parameterType="AccountVO">
        INSERT INTO USERS
        (
        EMP_NO, DEPT_CODE
        , USER_PW, NAME
        , ACCOUNT_TYPE, POSITION
        ,EMAIL, PHONE
        , USE_YN, EMPLOYED_AT
        , RESIGNED_AT, CREATED_BY
        , CREATED_AT
        )
        VALUES(
        #{empNo}, #{deptCode}
        , #{userPw}, #{name}
        , #{accountType}, #{position}
        , #{email}, #{phone}
        ,'Y', #{employedAtStr}
        , #{resignedAtStr}, 'admin'
        , sysdate()
        )
    </insert>

    <update id="updPwd" parameterType="AccountVO">
        UPDATE USERS U
        SET USER_PW = #{userPw}, UPDATED_AT = sysdate(), UPDATED_BY = #{userId}, EMAIL = #{email}
        WHERE U.EMP_NO = #{empNo}
    </update>
    
    <select id="myInfo" parameterType="AccountVO" resultType="AccountVo">
        select emp_no
            , dept_code
            , name
            , account_type
            , email
            , employed_at
            , date_format(employed_at , '%d/%m/%Y') as hire_date_en
            , date_format(employed_at , '%Y.%m.%d') as hire_date_hu
        from users u
        where emp_no = #{empNo}
           or admin_id =#{adminId}
    </select>
    
    <update id="updEmployeeAcct" parameterType="AccountVO">
        UPDATE USERS U
        SET U.USER_PW = #{userPw}, U.UPDATED_AT = sysdate() , U.UPDATED_BY = #{empNo}, U.EMAIL = #{email}
        WHERE U.EMP_NO = #{empNo}
    </update>

    <update id="updAdminAcct" parameterType="AccountVO">
        UPDATE USERS U
        SET
            U.UPDATED_AT = sysdate() ,
            U.UPDATED_BY = #{adminId}
            <if test="(userPw != null and userPw != '')">
                USER_PW = #{userPw} ,
            </if>
            <if test="(name != null and name != '')">
                NAME = #{name}
            </if>
        WHERE
            U.EMP_NO = #{adminId}
    </update>


    <update id="updateAuth" parameterType="AccountVO">
        UPDATE USERS U
            SET U.UPDATED_AT = sysdate() ,
                 U.authority = #{authority}
        WHERE U.EMP_NO = #{empNo}
    </update>

    <!-- 재전송 타이머 종료시 인증키 초기화-->
    <update id="countDelete">
        UPDATE USERS
            SET authority = NULL
        WHERE EMP_NO = #{userId}
    </update>


    <select id="getUserInfo" resultType="UserVO">
         select u.emp_no
              , u.dept_code
              , u.name
              , u.account_type
              , u.email
              , u.employed_at
              , date_format(u.employed_at , '%d/%m/%Y') as hire_date_en
              , date_format(u.employed_at , '%Y.%m.%d') as hire_date_hu
              , gai.salary_no
              , gai.job as job_title
              , gai.wage_type
           from ghr_account_info gai
           join users u
             on gai.emp_no = u.emp_no
          where gai.emp_no = #{empNo}
    </select>

    <select id="getAdminHistory" parameterType="AccountVO" resultType="HistoryVO">
        select  log_type as logType,
                created_at as createdAt,
                ip_address as ipAddress
        from process_log
         where
            created_by =#{empNo}
        and created_at &gt;= STR_TO_DATE(#{startDt}, '%Y-%m-%d %H:%i:%s')
        and created_at &lt;= STR_TO_DATE(#{endDt}, '%Y-%m-%d %H:%i:%s')
        order by created_at desc
    </select>
</mapper>